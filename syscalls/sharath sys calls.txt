System Calls

1) fork()

#include<stdio.h> 
main() 
{ 
printf("Before FORK \n"); 
fork(); 
printf("After FORK \n\n"); 
} 
O/P:
Before FORK 
After FORK 

After FORK 

2) exec()

#include <sys/types.h>
#include <unistd.h>
int main() {
    execl("/bin/ls", "ls", NULL); 
    return 0;
}
O/P:
=== Code Execution Successful ===

3) getpid()

#include <stdio.h>
#include <unistd.h>

int main() {
    printf("Parent process ID: %d\n", getppid());
    printf("Child process ID: %d\n", getpid());
    return 0;
}
O/P:
Parent process ID: 16429
Child process ID: 16436

4) exit()

#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    int p = fork(); 
    if (p == 0) {
        printf("\nChild process created\n");
        exit(0);
    } else if (p < 0) {
        printf("Failed to create child process\n");
        exit(-1); 
    }
    return 0;
}
O/P:
Child process created

5) wait()

#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
int main() {
    int pid, i = 0;
    printf("Ready to fork\n");
    pid = fork(); 
    if (pid == 0) {
        printf("Child process starts\n");
        for (i = 0; i < 10; i++) {
            printf("Child process running %d\n", i);
            sleep(1);
        }
        printf("Child process ends\n");
    } else {
        wait(NULL); 
        for (i = 0; i < 10; i++) {
            printf("Parent process running %d\n", i);
            sleep(1);
        }
        printf("Parent process ends\n");
    }
    return 0;
}
O/P:
Ready to fork
Child process starts
Child process running 0
Child process running 1
Child process running 2
Child process running 3
Child process running 4
Child process running 5
Child process running 6
Child process running 7
Child process running 8
Child process running 9
Child process ends
Parent process running 0
Parent process running 1
Parent process running 2
Parent process running 3
Parent process running 4
Parent process running 5
Parent process running 6
Parent process running 7
Parent process running 8
Parent process running 9
Parent process ends

6) close()

#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>

int main() {
    int fd, i;
    fd = open("test.txt", O_CREAT | O_RDWR | O_APPEND, 0644); 
    if (fd < 0) {
        perror("Failed to open file");
        return 1;
    }
    for (i = 0; i < 5; i++)
        write(fd, "CVSR\n", 5); 
    close(fd); 
    return 0;
}
O/P:
Failed to open file: Permission denied

7) opendir(), readdir()

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <dirent.h>
int main(int argc, char *argv[]) {
    DIR *dp;
    struct dirent *dirp;

    if (argc != 2) {
        printf("A single argument (the directory name) is required.\n");
        exit(1);
    }
    if ((dp = opendir(argv[1])) == NULL) {
        printf("Cannot open directory: %s\n", argv[1]);
        exit(1);
    }
    while ((dirp = readdir(dp)) != NULL) {
        printf("Name: %s | Inode: %ld\n", dirp->d_name, dirp->d_ino);
    }
    closedir(dp);
    return 0;
}
O/P:
A single argument (the directory name) is required.

8) stat()

#include <stdio.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    struct stat fileStat;
    if (argc != 2 || stat(argv[1], &fileStat) < 0) return 1;

    printf("File: %s\nSize: %ld bytes\nPermissions: %o\n", argv[1], fileStat.st_size, fileStat.st_mode & 0777);
    return 0;
}
O/P:
=== Code Execution Successful ===
